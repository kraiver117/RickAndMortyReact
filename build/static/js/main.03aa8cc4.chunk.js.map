{"version":3,"sources":["assets/images/loader.gif","assets/images/banner.png","components/Item.js","components/Loader.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Item","className","src","this","props","character","image","alt","name","React","Component","Loader","loading","Home","state","nextPage","error","data","results","getCharacters","setState","fetch","response","json","concat","console","log","message","Banner","map","key","id","onClick","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,yNCe5BC,E,iLAXX,OACE,yBAAKC,UAAU,0BACb,6BACE,yBAAKC,IAAKC,KAAKC,MAAMC,UAAUC,MAAOC,IAAI,GAAGN,UAAU,YAEzD,yBAAKA,UAAU,gBAAgBE,KAAKC,MAAMC,UAAUG,W,GAPzCC,IAAMC,W,iBCQVC,MARf,WACE,OACE,6BACE,yBAAKT,IAAKU,IAASL,IAAI,UAAUN,UAAU,sB,iBC+ElCY,E,YA9Eb,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KACDU,MAAQ,CACXC,SAAU,EACVH,SAAS,EACTI,MAAO,KACPC,KAAM,CAAEC,QAAS,KANF,E,iFAWjBf,KAAKgB,kB,uHAILhB,KAAKiB,SAAS,CAAER,SAAS,EAAMI,MAAO,O,4BAGbK,MAAM,mDAAD,OACyBlB,KAAKW,MAAMC,Y,cAD1DO,E,0BAGaA,EAASC,Q,OAAtBN,E,OACNd,KAAKiB,SAAS,CACZR,SAAS,EACTK,KAAM,CACJC,QAAS,GAAGM,OAAOrB,KAAKW,MAAMG,KAAKC,QAASD,EAAKC,UAEnDH,SAAUZ,KAAKW,MAAMC,SAAW,I,kDAGlCU,QAAQC,IAAR,MACAvB,KAAKiB,SAAS,CACZR,SAAS,EACTI,MAAM,EAAD,K,0FAKD,IAAD,OACP,OAAIb,KAAKW,MAAME,MACP,SAAN,OAAgBb,KAAKW,MAAME,MAAMW,SAGjC,yBAAK1B,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,yBACb,yBAAKC,IAAK0B,IAAQrB,IAAI,aAG1B,6BACE,wBAAIN,UAAU,uDACXE,KAAKW,MAAMG,KAAKC,QAAQW,KAAI,SAAAxB,GAAS,OACpC,wBAAIJ,UAAU,mBAAmB6B,IAAKzB,EAAU0B,IAC9C,kBAAC,EAAD,CAAM1B,UAAWA,UAMxBF,KAAKW,MAAMF,SAAW,kBAAC,EAAD,OAErBT,KAAKW,MAAMF,SACX,yBAAKX,UAAU,YACb,yBAAKA,UAAU,mBACb,4BACEA,UAAU,wBACV+B,QAAS,kBAAM,EAAKb,kBAFtB,oB,GAjEKV,IAAMC,WCWVuB,MAZf,WAEI,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvB,OCGvBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.03aa8cc4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.960a1abf.gif\";","module.exports = __webpack_public_path__ + \"static/media/banner.42d6efdb.png\";","import React from \"react\";\n\nclass Item extends React.Component {\n  render() {\n    return (\n      <div className=\"avatar__container mt-3\">\n        <div>\n          <img src={this.props.character.image} alt=\"\" className=\"avatar\" />\n        </div>\n        <div className=\"avatar__name\">{this.props.character.name}</div>\n      </div>\n    );\n  }\n}\n\nexport default Item;\n","import React from \"react\";\nimport loading from \"../assets/images/loader.gif\";\nfunction Loader() {\n  return (\n    <div>\n      <img src={loading} alt=\"Loading\" className=\"d-block mx-auto\"/>\n    </div>\n  );\n}\n\nexport default Loader;\n","import React from \"react\";\nimport Item from \"../components/Item\";\nimport Loader from \"../components/Loader\";\nimport Banner from \"../assets/images/banner.png\";\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nextPage: 1,\n      loading: true,\n      error: null,\n      data: { results: [] }\n    };\n  }\n\n  componentDidMount() {\n    this.getCharacters();\n  }\n\n  async getCharacters() {\n    this.setState({ loading: true, error: null });\n\n    try {\n      const response = await fetch(\n        `https://rickandmortyapi.com/api/character/?page=${this.state.nextPage}`\n      );\n      const data = await response.json();\n      this.setState({\n        loading: false,\n        data: {\n          results: [].concat(this.state.data.results, data.results)\n        },\n        nextPage: this.state.nextPage + 1\n      });\n    } catch (err) {\n      console.log(err);\n      this.setState({\n        loading: false,\n        error: err\n      });\n    }\n  }\n\n  render() {\n    if (this.state.error) {\n      return `Error ${this.state.error.message}`;\n    }\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col w-100 text-center\">\n            <img src={Banner} alt=\"Banner\" />\n          </div>\n        </div>\n        <div>\n          <ul className=\"list-inline d-flex justify-content-around flex-wrap\">\n            {this.state.data.results.map(character => (\n              <li className=\"list-inline-item\" key={character.id}>\n                <Item character={character} />\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        {this.state.loading && <Loader />}\n\n        {!this.state.loading && (\n          <div className=\"row mb-5\">\n            <div className=\"col text-center\">\n              <button\n                className=\"btn btn-primary w-100\"\n                onClick={() => this.getCharacters()}\n              >\n                Load More\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Home from './pages/Home';\n\nfunction App() {\n\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={Home}/>\n        </Switch>\n      </BrowserRouter>\n    )  \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}